from keras import backend as K
from keras import losses
import numpy as np

def musical_closeness_loss(y_true,y_pred):

    p = 0.5
    a = p**1
    b = p**2
    c = p**3
    d = p**4
    e = p**5
    f = p**6
    g = p**7

    mask = np.array([[a+b+d,0,0,0,e,0,0,c+f,0,0,g,0],
                    [0,a+b+d,0,0,0,e,0,0,c+f,0,0,g],
                    [g,0,a+b+d,0,0,0,e,0,0,c+f,0,0],
                    [0,g,0,a+b+d,0,0,0,e,0,0,c+f,0],
                    [0,0,g,0,a+b+d,0,0,0,e,0,0,c+f],
                    [c+f,0,0,g,0,a+b+d,0,0,0,e,0,0],
                    [0,c+f,0,0,g,0,a+b+d,0,0,0,e,0],
                    [0,0,c+f,0,0,g,0,a+b+d,0,0,0,e],
                    [e,0,0,c+f,0,0,g,0,a+b+d,0,0,0],
                    [0,e,0,0,c+f,0,0,g,0,a+b+d,0,0],
                    [0,0,e,0,0,c+f,0,0,g,0,a+b+d,0],
                    [0,0,0,e,0,0,c+f,0,0,g,0,a+b+d],
                    [a+b+d,0,0,0,e,0,0,c+f,0,0,g,0],
                    [0,a+b+d,0,0,0,e,0,0,c+f,0,0,g],
                    [g,0,a+b+d,0,0,0,e,0,0,c+f,0,0],
                    [0,g,0,a+b+d,0,0,0,e,0,0,c+f,0],
                    [0,0,g,0,a+b+d,0,0,0,e,0,0,c+f],
                    [c+f,0,0,g,0,a+b+d,0,0,0,e,0,0],
                    [0,c+f,0,0,g,0,a+b+d,0,0,0,e,0],
                    [0,0,c+f,0,0,g,0,a+b+d,0,0,0,e],
                    [e,0,0,c+f,0,0,g,0,a+b+d,0,0,0],
                    [0,e,0,0,c+f,0,0,g,0,a+b+d,0,0],
                    [0,0,e,0,0,c+f,0,0,g,0,a+b+d,0],
                    [0,0,0,e,0,0,c+f,0,0,g,0,a+b+d],
                    [a+b+d,0,0,0,e,0,0,c+f,0,0,g,0],
                    [0,a+b+d,0,0,0,e,0,0,c+f,0,0,g],
                    [g,0,a+b+d,0,0,0,e,0,0,c+f,0,0],
                    [0,g,0,a+b+d,0,0,0,e,0,0,c+f,0],
                    [0,0,g,0,a+b+d,0,0,0,e,0,0,c+f]])

    mask = K.constant(mask)
    y_true_12 = K.dot(y_true,mask)
    y_pred_12 = K.dot(y_pred,mask)

    return losses.mean_squared_error(y_true_12,y_pred_12)


def musical_closeness_loss2(y_true,y_pred):

    p = 0.9
    a = p**1
    b = p**2
    c = p**3
    d = p**4
    e = p**5
    f = p**6
    g = p**7

    mask = np.array([[a,0,0,0,0,0,0,0,0,0,0,0,b,0,0,0,0,0,0,c,0,0,0,0,d,0,0,0,e,0,0,0,f,0,0,g,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,a,0,0,0,0,0,0,0,0,0,0,0,b,0,0,0,0,0,0,c,0,0,0,0,d,0,0,0,e,0,0,0,f,0,0,g,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,a,0,0,0,0,0,0,0,0,0,0,0,b,0,0,0,0,0,0,c,0,0,0,0,d,0,0,0,e,0,0,0,f,0,0,g,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,a,0,0,0,0,0,0,0,0,0,0,0,b,0,0,0,0,0,0,c,0,0,0,0,d,0,0,0,e,0,0,0,f,0,0,g,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,a,0,0,0,0,0,0,0,0,0,0,0,b,0,0,0,0,0,0,c,0,0,0,0,d,0,0,0,e,0,0,0,f,0,0,g,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,a,0,0,0,0,0,0,0,0,0,0,0,b,0,0,0,0,0,0,c,0,0,0,0,d,0,0,0,e,0,0,0,f,0,0,g,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,a,0,0,0,0,0,0,0,0,0,0,0,b,0,0,0,0,0,0,c,0,0,0,0,d,0,0,0,e,0,0,0,f,0,0,g,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,a,0,0,0,0,0,0,0,0,0,0,0,b,0,0,0,0,0,0,c,0,0,0,0,d,0,0,0,e,0,0,0,f,0,0,g,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,a,0,0,0,0,0,0,0,0,0,0,0,b,0,0,0,0,0,0,c,0,0,0,0,d,0,0,0,e,0,0,0,f,0,0,g,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,a,0,0,0,0,0,0,0,0,0,0,0,b,0,0,0,0,0,0,c,0,0,0,0,d,0,0,0,e,0,0,0,f,0,0,g,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,a,0,0,0,0,0,0,0,0,0,0,0,b,0,0,0,0,0,0,c,0,0,0,0,d,0,0,0,e,0,0,0,f,0,0,g,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,a,0,0,0,0,0,0,0,0,0,0,0,b,0,0,0,0,0,0,c,0,0,0,0,d,0,0,0,e,0,0,0,f,0,0,g,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,a,0,0,0,0,0,0,0,0,0,0,0,b,0,0,0,0,0,0,c,0,0,0,0,d,0,0,0,e,0,0,0,f,0,0,g,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,a,0,0,0,0,0,0,0,0,0,0,0,b,0,0,0,0,0,0,c,0,0,0,0,d,0,0,0,e,0,0,0,f,0,0,g,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,a,0,0,0,0,0,0,0,0,0,0,0,b,0,0,0,0,0,0,c,0,0,0,0,d,0,0,0,e,0,0,0,f,0,0,g,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,a,0,0,0,0,0,0,0,0,0,0,0,b,0,0,0,0,0,0,c,0,0,0,0,d,0,0,0,e,0,0,0,f,0,0,g,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,a,0,0,0,0,0,0,0,0,0,0,0,b,0,0,0,0,0,0,c,0,0,0,0,d,0,0,0,e,0,0,0,f,0,0,g,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,a,0,0,0,0,0,0,0,0,0,0,0,b,0,0,0,0,0,0,c,0,0,0,0,d,0,0,0,e,0,0,0,f,0,0,g,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,a,0,0,0,0,0,0,0,0,0,0,0,b,0,0,0,0,0,0,c,0,0,0,0,d,0,0,0,e,0,0,0,f,0,0,g,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,a,0,0,0,0,0,0,0,0,0,0,0,b,0,0,0,0,0,0,c,0,0,0,0,d,0,0,0,e,0,0,0,f,0,0,g,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,a,0,0,0,0,0,0,0,0,0,0,0,b,0,0,0,0,0,0,c,0,0,0,0,d,0,0,0,e,0,0,0,f,0,0,g,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,a,0,0,0,0,0,0,0,0,0,0,0,b,0,0,0,0,0,0,c,0,0,0,0,d,0,0,0,e,0,0,0,f,0,0,g,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,a,0,0,0,0,0,0,0,0,0,0,0,b,0,0,0,0,0,0,c,0,0,0,0,d,0,0,0,e,0,0,0,f,0,0,g,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,a,0,0,0,0,0,0,0,0,0,0,0,b,0,0,0,0,0,0,c,0,0,0,0,d,0,0,0,e,0,0,0,f,0,0,g,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,a,0,0,0,0,0,0,0,0,0,0,0,b,0,0,0,0,0,0,c,0,0,0,0,d,0,0,0,e,0,0,0,f,0,0,g,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,a,0,0,0,0,0,0,0,0,0,0,0,b,0,0,0,0,0,0,c,0,0,0,0,d,0,0,0,e,0,0,0,f,0,0,g,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,a,0,0,0,0,0,0,0,0,0,0,0,b,0,0,0,0,0,0,c,0,0,0,0,d,0,0,0,e,0,0,0,f,0,0,g,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,a,0,0,0,0,0,0,0,0,0,0,0,b,0,0,0,0,0,0,c,0,0,0,0,d,0,0,0,e,0,0,0,f,0,0,g,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,a,0,0,0,0,0,0,0,0,0,0,0,b,0,0,0,0,0,0,c,0,0,0,0,d,0,0,0,e,0,0,0,f,0,0,g]])

    mask = K.constant(mask)
    y_true_12 = K.dot(y_true,mask)
    y_pred_12 = K.dot(y_pred,mask)

    return losses.mean_squared_error(y_true_12,y_pred_12)

def musical_closeness_loss3(y_true,y_pred):

    p = 0.9
    a = p**1
    b = p**2
    c = p**3
    d = p**4
    e = p**5
    f = p**6
    g = p**7

    mask = np.array([[0,c+f,0,0,g,0,a+b+d,0,0,0,e,0],
                    [0,0,c+f,0,0,g,0,a+b+d,0,0,0,e],
                    [e,0,0,c+f,0,0,g,0,a+b+d,0,0,0],
                    [0,e,0,0,c+f,0,0,g,0,a+b+d,0,0],
                    [0,0,e,0,0,c+f,0,0,g,0,a+b+d,0],
                    [0,0,0,e,0,0,c+f,0,0,g,0,a+b+d],
                    [a+b+d,0,0,0,e,0,0,c+f,0,0,g,0],
                    [0,a+b+d,0,0,0,e,0,0,c+f,0,0,g],
                    [g,0,a+b+d,0,0,0,e,0,0,c+f,0,0],
                    [0,g,0,a+b+d,0,0,0,e,0,0,c+f,0],
                    [0,0,g,0,a+b+d,0,0,0,e,0,0,c+f],
                    [c+f,0,0,g,0,a+b+d,0,0,0,e,0,0],
                    [0,c+f,0,0,g,0,a+b+d,0,0,0,e,0],
                    [0,0,c+f,0,0,g,0,a+b+d,0,0,0,e],
                    [e,0,0,c+f,0,0,g,0,a+b+d,0,0,0],
                    [0,e,0,0,c+f,0,0,g,0,a+b+d,0,0],
                    [0,0,e,0,0,c+f,0,0,g,0,a+b+d,0],
                    [0,0,0,e,0,0,c+f,0,0,g,0,a+b+d],
                    [a+b+d,0,0,0,e,0,0,c+f,0,0,g,0],
                    [0,a+b+d,0,0,0,e,0,0,c+f,0,0,g],
                    [g,0,a+b+d,0,0,0,e,0,0,c+f,0,0],
                    [0,g,0,a+b+d,0,0,0,e,0,0,c+f,0],
                    [0,0,g,0,a+b+d,0,0,0,e,0,0,c+f],
                    [c+f,0,0,g,0,a+b+d,0,0,0,e,0,0],
                    [0,c+f,0,0,g,0,a+b+d,0,0,0,e,0],
                    [0,0,c+f,0,0,g,0,a+b+d,0,0,0,e],
                    [e,0,0,c+f,0,0,g,0,a+b+d,0,0,0],
                    [0,e,0,0,c+f,0,0,g,0,a+b+d,0,0],
                    [0,0,e,0,0,c+f,0,0,g,0,a+b+d,0]])

    mask = K.constant(mask)
    print(y_pred)
    #y_pred = K.minimum((K.maximum(y_pred - 0.499,0) * 10000),1)
    y_true_12 = K.dot(y_true,mask)
    y_pred_12 = K.dot(y_pred,mask)

    return losses.mean_squared_error(y_true_12,y_pred_12)
